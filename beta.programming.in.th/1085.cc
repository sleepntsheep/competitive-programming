/*⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⠶⣚⣋⣩⣭⣥⣄⣉⡉⠉⠙⠒⠦⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⡿⠖⠋⠉⠀⣀⣀⣀⡀⠀⠉⠛⠲⢤⡀⠀⠉⠙⠦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠟⠁⣀⠔⠂⣩⡈⠀⢠⡄⠈⠉⠒⢦⣄⠀⠈⠳⢤⡀⠀⠈⠳⢤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⠟⠁⡠⠚⣡⣀⣠⡷⠳⣴⡿⠻⣄⣴⣧⠀⠈⡳⢦⡀⠀⠙⢦⡀⠀⣼⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠟⠁⣠⢾⡁⢀⣿⠛⢿⠁⠀⠉⠀⠀⠛⠋⢹⣦⣴⣷⠀⠙⣦⠀⠀⠳⣄⠘⠋⠙⢷⣄⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⢠⣿⠋⠀⡴⠁⢸⡿⣿⠃⢠⡎⠀⠀⠀⠀⠀⠀⡆⠀⠿⠟⢻⣆⢀⣌⠳⡄⠀⠙⣆⠀⠀⠀⢿⣧⡀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⢠⣿⠃⠀⡜⣦⣤⡿⠀⠀⢠⣾⡇⠀⠀⡀⢰⠀⠀⣧⠀⠀⠀⠘⣿⣿⣿⡀⠙⡄⠀⠈⢧⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⣴⢿⠏⠀⣸⠀⡿⣿⠃⢠⢀⡏⡇⢹⡆⠀⡇⢸⠀⠠⣿⣧⡀⠀⢰⡿⢏⠹⣷⡞⢻⡄⠀⠈⣇⠀⠀⠀⠀⠈⠳⢄⠀⠀⠀
  ⠀⠀⠀⢠⣾⠃⡞⠀⢠⣿⣿⢡⠏⢀⡎⡞⣇⣧⠈⣧⠀⡇⢸⡇⢰⢿⠛⣷⡀⠘⣷⡘⡄⠿⠟⢧⣽⡀⠀⠘⡆⠀⠀⠀⠀⠀⠈⠱⣄⠀
  ⠀⠀⢠⡟⠁⢰⠃⠀⣾⠋⠁⢸⡄⣼⢐⡁⣿⡿⠦⠸⠄⠳⠞⠁⠼⠤⠷⠛⠷⣄⡺⢷⡇⠀⠀⠈⣿⣧⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠈⠳
  ⠀⢀⡟⠀⠀⡟⠀⢰⠏⠀⠀⣸⡇⠃⠀⠀⠈⠁⠀⠀⢀⣀⣀⣀⣀⣀⣠⣤⣤⣤⣤⣤⣽⡆⠀⠀⠘⢿⡄⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⡼⠀⠀⢘⡇⠀⢸⠀⢰⣶⣿⣷⣾⣿⣿⢻⣟⢻⣿⡟⠛⢻⣿⣿⣿⣿⣿⢻⣼⢳⣼⡟⠃⠀⠀⠀⢸⠇⠀⠀⢻⠀⠀⢠⠀⠀⠀⠀⠀
  ⢰⠇⠀⠀⣸⠁⠀⡇⠀⠈⠻⢿⣿⣿⠿⣼⢻⣼⣿⠿⠃⠀⠈⠹⢿⣿⣿⣭⣿⣴⠿⠋⠀⡄⠀⠀⠀⡟⢸⠀⠀⢸⠀⠀⠘⠓⢲⡖⠒⠒
  ⢸⣤⡤⠴⣿⠀⠀⣧⠀⠀⢢⠸⡝⠛⠛⠛⠛⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡜⢁⠀⠀⠀⢟⢸⠀⠀⢸⠀⠀⠀⠀⠈⡇⠀⠀
  ⠀⠀⠀⠀⣿⠀⠀⢹⠀⠀⠈⢦⢳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⢾⠟⠀⡘⠀⠀⢠⠸⡏⠀⠀⢸⠀⠀⠀⠀⢸⡇⠀⠀
  ⠀⠀⠀⠀⢸⡇⠀⣧⠆⠀⢀⢀⢳⣷⠀⠀⠀⠀⠀⣴⣶⣶⣶⣶⠀⠀⠀⠀⠀⠀⡸⣸⠀⡇⠀⠀⢠⣷⡙⡄⠀⡼⠀⠀⠀⠀⣼⠃⠀⠀
  ⠀⠀⠀⠀⠈⣷⣸⠏⡆⠀⢸⠘⡄⢿⢄⠀⠀⠀⠀⠙⠿⣋⡽⠏⠀⠀⠀⠀⠀⢠⣿⡇⢸⡇⠀⠀⡼⠁⠈⠛⢶⣧⣤⣄⣤⣼⡏⠀⠀⠀
  ⠀⠀⠀⠀⠀⢸⡿⠀⢣⠀⠸⣇⢳⡸⡄⠙⠲⣄⡀⠀⠀⠀⠀⠀⠀⢀⣠⠔⢺⢏⣾⢇⣿⠃⡀⢠⠃⠀⠀⠀⣾⠉⠉⠉⣹⠏⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⢱⡀⠘⡄⠀⢿⡌⡛⣿⣤⢤⠀⢻⣿⣶⡤⡤⠒⠋⣉⣀⣴⠟⢯⣾⣼⠇⢠⢃⡏⠀⠀⠀⣸⠁⠀⢀⡼⠃⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠱⡄⢹⣧⠘⣿⣅⠛⠯⣀⣻⡏⠙⣿⠏⣉⢢⣞⣁⣹⠯⠤⣾⡟⠉⢀⣯⠾⠃⠀⢀⡼⠃⣀⡴⠋⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠈⢢⣿⣦⠘⢻⣆⠀⠀⠀⠀⠈⠀⠀⡀⠉⢢⠀⠀⠀⢴⡟⠀⣠⠿⠁⣀⣠⡶⣋⡤⠞⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⠙⢧⠀⠻⣇⠀⠀⠀⠀⠀⠈⠛⢀⡼⠀⣀⡤⣋⣄⣴⣧⣶⣾⠿⠟⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⠤⠌⠉⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ shark*/
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;
const int INF = 1e9;
#define pii pair<int, int>
#define st first
#define nd second
#define FOR(i,a,b) for(int i = a; i < b; i++)
#define ll long long

int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n, m, k;
    cin >> n >> m >> k;
    vector<int> g[n+1];
    int nx[n+1];
    memset(nx, 0, sizeof nx);
    nx[n] = 1;
    for (int i = 0, a, b; i < m; i++) {
        cin >> a >> b;
        g[a].push_back(b);
    }
    for (int i = 0, x; i < k; i++) {
        cin >> x;
        nx[x] = 1;
    }
    int v[n+1];
    memset(v, 0, sizeof v);
    queue<int> q;
    v[1] = 1;
    q.emplace(1);
    while (!q.empty()) {
        int t = q.front();
        q.pop();
        for (int nei: g[t]) {
            if (v[nei]) continue;
            v[nei] = 1;
            q.push(nei);
        }
        if (nx[t]) continue;
        if (v[t+1]) continue;
        v[t+1] = 1;
        q.push(t+1);
    }
    if (v[n])
        cout << 1;
    else {
        cout << 0 << ' ';
        for (int i = n; i >= 1; i--) {
            if (v[i]) {
                cout << i;
                break;
            }
        }
    }
    return 0;
}

